
import time
import random
import logging
import requests
from flickrapi import FlickrAPI
from PIL import Image, ExifTags, ImageOps
from io import BytesIO
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(level–µ–Ω—å)- %(message)s')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Misskey
MISSKEY_API_BASE_URL = 'https://misskey.de'
ACCESS_TOKEN = ''

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flickr API
FLICKR_PUBLIC = ''
FLICKR_SECRET = ''
flickr = FlickrAPI(FLICKR_PUBLIC, FLICKR_SECRET, format='parsed-json')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenCage Geocoder API
OPENCAGE_API_KEY = ''

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Misskey
MAX_WIDTH = 4096
MAX_HEIGHT = 4096

HASHTAGS = ["#photo", "#foto", "#flickr", "#photography", "#map", "#world", "#peace"]

def correct_image_orientation(image):
    try:
        exif = image._getexif()
        if exif:
            for tag, value in exif.items():
                if tag in ExifTags.TAGS and ExifTags.TAGS[tag] == 'Orientation':
                    if value == 3:
                        image = image.rotate(180, expand=True)
                    elif value == 6:
                        image = image.rotate(270, expand=True)
                    elif value == 8:
                        image = image.rotate(90, expand=True)
    except (AttributeError, KeyError, IndexError):
        pass
    return image

def resize_image(image_path):
    with Image.open(image_path) as img:
        img = correct_image_orientation(img)
        original_size = img.size
        img.thumbnail((MAX_WIDTH, MAX_HEIGHT), Image.ANTIALIAS)
        new_size = img.size
        img.save(image_path)
        return original_size, new_size

def extract_exif_data(image_path):
    with Image.open(image_path) as img:
        exif_data = {}
        exif = img._getexif()
        if exif:
            for tag, value in exif.items():
                decoded = ExifTags.TAGS.get(tag, tag)
                if decoded in ["FNumber", "ExposureTime", "ISOSpeedRatings", "FocalLength", "Model"]:
                    exif_data[decoded] = value
        return exif_data

def format_exif_data(exif_data):
    exif_message = ""
    if "FNumber" in exif_data:
        exif_message += f"–î–∏–∞—Ñ—Ä–∞–≥–º–∞: f/{exif_data['FNumber']}\n"
    if "ExposureTime" in exif_data:
        exif_message += f"–í—ã–¥–µ—Ä–∂–∫–∞: {exif_data['ExposureTime']} —Å–µ–∫\n"
    if "ISOSpeedRatings" in exif_data:
        exif_message += f"ISO: {exif_data['ISOSpeedRatings']}\n"
    if "FocalLength" in exif_data:
        exif_message += f"–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {exif_data['FocalLength']} –º–º\n"
    if "Model" in exif_data:
        exif_message += f"–ö–∞–º–µ—Ä–∞: {exif_data['Model']}\n"
    return exif_message

def post_to_misskey(message, image_paths):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Misskey...")
    media_ids = []
    for image_path in image_paths:
        original_size, new_size = resize_image(image_path)
        logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —Å {original_size} –¥–æ {new_size}")
        with open(image_path, 'rb') as f:
            files = {'file': f}
            headers = {'Authorization': f'Bearer {ACCESS_TOKEN}'}
            response = requests.post(f'{MISSKEY_API_BASE_URL}/api/drive/files/create', files=files, headers=headers)
            response_data = response.json()
            media_ids.append(response_data['id'])
    
    payload = {
        'i': ACCESS_TOKEN,
        'text': message,
        'fileIds': media_ids
    }
    headers = {'Content-Type': 'application/json'}
    response = requests.post(f'{MISSKEY_API_BASE_URL}/api/notes/create', json=payload, headers=headers)
    logging.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

def get_random_hashtags():
    return " ".join(random.sample(HASHTAGS, 6))

def search_and_post():
    while True:
        try:
            logging.info("–ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ Flickr...")
            photo, title, author, lat, lon = search_for_photo()

            if photo:
                logging.info("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...")
                address = get_address(lat, lon)
                if not address:
                    address = f"{lat}, {lon}"
                logging.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞—Ä—Ç—ã...")
                map_image_path = create_map_screenshot(lat, lon)
                hashtags = get_random_hashtags()
                message = f"üì∏ –ê–≤—Ç–æ—Ä —Ñ–æ—Ç–æ: {author}"

                if title:
                    message += f"\nüìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}"

                if address:
                    message += f"\nüè† –ê–¥—Ä–µ—Å: {address}"

                exif_data = extract_exif_data('photo.jpg')
                if exif_data:
                    exif_message = format_exif_data(exif_data)
                    if exif_message:
                        message += f"\n\n‚öô EXIF –¥–∞–Ω–Ω—ã–µ:\n{exif_message}"

                message += f"\nüåê –®–∏—Ä–æ—Ç–∞: {lat}\nüåê –î–æ–ª–≥–æ—Ç–∞: {lon}\n{hashtags}"
                post_to_misskey(message, ['photo.jpg', map_image_path])
                
                delay = random.randint(3600, 10800)  # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                hours = delay // 3600
                minutes = (delay % 3600) // 60
                logging.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç.")
                time.sleep(delay)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(60)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def search_for_photo():
    photos = flickr.photos.search(has_geo=1, per_page=10, extras='geo')
    photo = random.choice(photos['photos']['photo'])
    photo_id = photo['id']
    lat = photo['latitude']
    lon = photo['longitude']

    info = flickr.photos.getInfo(photo_id=photo_id)
    author = info['photo']['owner']['username']
    title = info['photo']['title']['_content']

    sizes = flickr.photos.getSizes(photo_id=photo_id)
    image_url = sizes['sizes']['size'][-1]['source']

    image_data = requests.get(image_url).content
    with open('photo.jpg', 'wb') as file:
        file.write(image_data)

    return photo, title, author, lat, lon

def get_address(lat, lon):
    url = f"https://api.opencagedata.com/geocode/v1/json?q={lat}+{lon}&key={OPENCAGE_API_KEY}"
    response = requests.get(url)
    data = response.json()
    if data['results']:
        address_components = data['results'][0]['components']
        address_parts = [
            address_components.get('road'),
            address_components.get('suburb'),
            address_components.get('city'),
            address_components.get('state'),
            address_components.get('postcode'),
            address_components.get('country')
        ]
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–ø—É—Å—Ç—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        address = ', '.join(part for part in address_parts if part)
        return address
    else:
        return None

def create_map_screenshot(lat, lon):
    # URL –∫–∞—Ä—Ç—ã
    map_url = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=15/{lat}/{lon}"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1024,768')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-software-rasterizer')

    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    driver.get(map_url)
    time.sleep(5)  # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é

    # –°–∫—Ä—ã—Ç–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é JavaScript
    driver.execute_script("""
        document.querySelectorAll('header, .sidebar, .search-container, .sidebar-content-container').forEach(el => el.style.display = 'none');
    """)
    time.sleep(2)  # –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è

    # –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
    map_element = driver.find_element(By.ID, 'map')  # –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    location = map_element.location
    size = map_element.size

    screenshot = driver.get_screenshot_as_png()
    driver.quit()

    # –û–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
    map_image = Image.open(BytesIO(screenshot))
    left = location['x'] + 411
    top = location['y']
    right = location['x'] + size['width']
    bottom = location['y'] + size['height']
    map_image = map_image.crop((left, top, right, bottom))

    map_image_path = 'map.png'
    map_image.save(map_image_path)

    return map_image_path

if __name__ == "__main__":
    search_and_post()
